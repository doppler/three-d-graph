{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","angle","setAngle","useEffect","cancelAnimationFrame","frame","requestAnimationFrame","react_default","a","createElement","id","style","transform","concat","map","side","App_Face","assign","key","graphSize","graphDivs","Face","_ref","className","width","height","toConsumableArray","Array","keys","i","w","x1","x2","y1","y2","App_SineWave","SineWave","_ref2","Zero","Frequency","Math","PI","Phase","Amplitude","cx","cy","sin","r","fill","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOA4BeA,SAzBH,WACV,IADgBC,EAIUC,mBAAS,IAJnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAITK,EAJSH,EAAA,GAIFI,EAJEJ,EAAA,GAahB,OANAK,oBAAU,WACRC,0BAFEC,GAGFC,sBAAsB,kBACpBJ,EAAS,SAAAD,GAAK,OAAe,KAAVA,EAAe,EAAIA,EAAQ,OAE/C,CAACA,IAEFM,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,MAAO,CAAEC,UAAS,WAAAC,OAAaZ,EAAb,UAC9B,CAAC,QAAS,OAAQ,QAAS,QAAQa,IAAI,SAAAC,GAAI,OAC1CR,EAAAC,EAAAC,cAACO,EAADjB,OAAAkB,OAAA,CAAMC,IAAKH,GAAU,CAAEI,UAhBf,IAgB0BC,UAjB1B,EAiBqCnB,QAAOS,GAAIK,YAS9DM,EAAO,SAAAC,GAAA,IAAGZ,EAAHY,EAAGZ,GAAIS,EAAPG,EAAOH,UAAWC,EAAlBE,EAAkBF,UAAWnB,EAA7BqB,EAA6BrB,MAA7B,OACXM,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OAAOb,GAAIA,EAAIC,MAAO,CAAEa,MAAOL,EAAWM,OAAQN,IAC/DZ,EAAAC,EAAAC,cAAA,OAAKe,MAAOL,EAAWM,OAAQN,GAC5BpB,OAAA2B,EAAA,EAAA3B,CAAI4B,MAAMP,EAAY,GAAGQ,QAAQd,IAAI,SAAAe,GACpC,IAAIC,EAAI,EAAKX,EAAYC,EAAaS,EACtC,OACEtB,EAAAC,EAAAC,cAAA,KAAGS,IAAKW,EAAGnB,GAAG,QACZH,EAAAC,EAAAC,cAAA,QAAMsB,GAAI,EAAGC,GAAIb,EAAWc,GAAIH,EAAGI,GAAIJ,IAEvCvB,EAAAC,EAAAC,cAAC0B,EAAa,CAAEhB,YAAWlB,gBAQjCmC,EAAW,SAAAC,GAA0B,IAAvBlB,EAAuBkB,EAAvBlB,UAAWlB,EAAYoC,EAAZpC,MAEvBqC,EAAOnB,EAAY,EACnBoB,EAAuB,EAAVC,KAAKC,GAFX,GAGPC,EAASzC,EAAQuC,KAAKC,GAAK,EAAK,IAChCE,EAAYxB,EAAY,EAE9B,OAAOpB,OAAA2B,EAAA,EAAA3B,CAAI4B,MANE,IAMUC,QAAQd,IAAI,SAAAe,GAAC,OAClCtB,EAAAC,EAAAC,cAAA,UACES,IAAKW,EACLe,GAAKzB,EATI,GASgBU,EACzBgB,GAAIP,EAAOE,KAAKM,IAAIP,EAAYV,EAAIa,GAASC,EAC7CI,EAAG,EACHpC,MAAO,CAAEqC,KAAI,QAAAnC,OAAW,IAZf,GAY6BgB,EAAzB,sBChDCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.238c5f82.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const graphDivs = 1;\n  const graphSize = 250;\n\n  const [angle, setAngle] = useState(45);\n\n  let frame;\n  useEffect(() => {\n    cancelAnimationFrame(frame);\n    requestAnimationFrame(() =>\n      setAngle(angle => (angle === 89 ? 0 : angle + 1))\n    );\n  }, [angle]);\n  return (\n    <div id=\"App\">\n      <div id=\"Scene\">\n        <div id=\"Cube\" style={{ transform: `rotateY(${angle}deg)` }}>\n          {[\"front\", \"left\", \"right\", \"back\"].map(side => (\n            <Face key={side} {...{ graphSize, graphDivs, angle, id: side }} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n\nconst Face = ({ id, graphSize, graphDivs, angle }) => (\n  <div className=\"Face\" id={id} style={{ width: graphSize, height: graphSize }}>\n    <svg width={graphSize} height={graphSize}>\n      {[...Array(graphDivs + 1).keys()].map(i => {\n        let w = 0 + (graphSize / graphDivs) * i;\n        return (\n          <g key={i} id=\"grid\">\n            <line x1={0} x2={graphSize} y1={w} y2={w} />\n            {/* <line y1={0} y2={graphSize} x1={w} x2={w} /> */}\n            <SineWave {...{ graphSize, angle }} />\n          </g>\n        );\n      })}\n    </svg>\n  </div>\n);\n\nconst SineWave = ({ graphSize, angle }) => {\n  const divs = 63;\n  const Zero = graphSize / 2;\n  const Frequency = (Math.PI * 2) / divs;\n  const Phase = (angle * Math.PI * 4) / 180;\n  const Amplitude = graphSize / 2;\n\n  return [...Array(divs).keys()].map(i => (\n    <circle\n      key={i}\n      cx={(graphSize / divs) * i}\n      cy={Zero + Math.sin(Frequency * i + Phase) * Amplitude}\n      r={1}\n      style={{ fill: `hsla(${(360 / divs) * i}, 100%, 50%)` }}\n    />\n  ));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}