{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["translateLength","graphSize","Math","tan","PI","App","_useState","useState","_useState2","Object","slicedToArray","angle","setAngle","useEffect","requestAnimationFrame","cancelAnimationFrame","frame","document","getElementById","style","setProperty","concat","react_default","a","createElement","id","transform","toConsumableArray","Array","keys","map","side","App_Face","key","href","target","rel","Face","_ref","className","objectSpread","width","height","App_SineWave","graphDivs","i","w","x1","x2","y1","y2","SineWave","_ref2","numPoints","round","Frequency","Phase","cx","cy","sin","r","fill","stroke","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.083e9b30.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst graphDivs = 1;\nconst graphSize = 250;\nconst numSides = 6;\nconst translateLength =\n  graphSize / 2 / Math.tan(((360 / numSides / 2) * Math.PI) / 180);\n\nconst App = () => {\n  const [angle, setAngle] = useState(0);\n\n  let frame;\n  useEffect(() => {\n    requestAnimationFrame(() =>\n      setAngle(angle => (angle === 360 / numSides - 1 ? 0 : angle + 0.25))\n    );\n    return () => {\n      cancelAnimationFrame(frame);\n    };\n  }, [angle]);\n  useEffect(() => {\n    document\n      .getElementById(\"Scene\")\n      .style.setProperty(\"perspective\", `${translateLength * 2.5}px`);\n  }, []);\n  return (\n    <div id=\"App\">\n      <div id=\"Scene\">\n        <div id=\"Cube\" style={{ transform: `rotateY(${angle}deg)` }}>\n          {[...Array(numSides).keys()].map(side => (\n            <Face {...{ angle, side, key: side }} />\n          ))}\n        </div>\n      </div>\n      <a\n        href=\"https://github.com/doppler/three-d-graph/blob/master/src/App.js\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        View Source\n      </a>\n    </div>\n  );\n};\nexport default App;\n\nconst Face = ({ side, angle, style }) => (\n  <div\n    className=\"Face\"\n    style={{\n      ...style,\n      width: graphSize,\n      height: graphSize,\n      transform: `rotateY(${(360 / numSides) *\n        side}deg) translateZ(${translateLength}px)`\n    }}\n  >\n    <svg width={graphSize} height={graphSize}>\n      <SineWave {...{ graphSize, angle }} />\n      {[...Array(graphDivs + 1).keys()].map(i => {\n        let w = 0 + (graphSize / graphDivs) * i;\n        return (\n          <g key={i} id=\"grid\">\n            <line x1={0} x2={graphSize} y1={w} y2={w} />\n            {/* <line y1={0} y2={graphSize} x1={w} x2={w} /> */}\n          </g>\n        );\n      })}\n    </svg>\n  </div>\n);\n\nconst SineWave = ({ angle }) => {\n  const numPoints = Math.round((graphSize / numSides) * 2);\n  const Origin = graphSize / 2;\n  const Frequency = (Math.PI * 2) / numPoints;\n  const Phase = (angle * Math.PI * numSides) / 180;\n  const Amplitude = graphSize / 2;\n\n  return [...Array(numPoints).keys()].map(i => (\n    <g key={i}>\n      <circle\n        key={i}\n        cx={(graphSize / numPoints) * i}\n        cy={Origin + Math.sin(Frequency * i + Phase) * Amplitude}\n        r={1}\n        style={{ fill: `hsl(${(360 / numPoints) * i}, 100%, 50%)` }}\n      />\n      <line\n        x1={(graphSize / numPoints) * i}\n        x2={(graphSize / numPoints) * i}\n        y1={graphSize}\n        y2={Origin + Math.sin(Frequency * i + Phase) * Amplitude}\n        style={{\n          stroke: `hsla(${180 - (360 / numPoints) * i}, 100%, 25%, 0.15)`\n        }}\n      />\n    </g>\n  ));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}